create database ORG;
use ORG;

-- Create Tables as per Requires
 
create table Customers(
CustomerID int primary key,
Name varchar(255),
Email_ID varchar (255),
Join_Date date);

create table Products(
ProductID int primary key,
Name varchar(255),
Category varchar(255),
Price decimal(10,2));

create table Orders(
OrdersID int primary key,
CustomerID int,
Order_Date date,
Total_Amount decimal(10,2),
foreign key (CustomerID) references Customers(CustomerID));

create table OrderDetails(
Order_DetailsID int primary key,
OrderID int,
ProductID int,
Quantity int, 
Price_Per_Unit decimal(10,2),
foreign key (OrderID) references Orders(OrdersID),
foreign key (ProductID) references Products(ProductID));

insert into Customers(CustomerID, Name, Email_ID, Join_Date) Values
(1, 'John Doe', 'johndoe@example.com', '2020-01-10'),
(2, 'Jane Smith', 'janesmith@example.com', '2020-01-15'),
(3, 'Sani Dev','sanidev@gmail.com', '2020-03-23'),
(4, 'Ashwani Panday','Ashwani23@gmail.com','2020-05-20'),
(5,'Ravi Kant','kantravi345@gmail.com','2020-03-15'),
(6,'Virendra Kumar','virendrakumar876@gmail.com','2021-04-03'),
(7, 'Sachin Kumar','kumarsachine12@gmail.com','2019-03-14'),
(8, 'Rohani Kumari','Roshani876@gmail.com','2020-08-28'),
(9, 'Ravikant','ravikant456@gmail.com','2020-06-14'),
(10, 'Alice Johnson', 'alicejohnson@example.com', '2020-03-05'); 

INSERT INTO Products (ProductID, Name, Category, Price) VALUES
(1, 'Laptop', 'Electronics', 9989.99),
(2, 'Smartphone', 'Electronics', 4999.99),
(3,'Laptop','Electronics', 19997),
(4,"Smart Watch",'Electronics', 2500),
(5,'Mobile','Electronics',9999),
(6,'Tablet','Electronics',5699),
(7, 'Mobile','Electronics',8799),
(8, 'Laptop','Electronics',12999),
(9, 'Smartphone','Electronics',8799),
(10, 'Desk Lamp', 'Home Decor', 2999); 

INSERT INTO Orders (OrderSID, CustomerID, Order_Date, Total_Amount) VALUES
(1, 1, '2020-02-15', 1499.98),
(2, 2, '2020-02-17', 1499.99),
(3, 3, '2021-03-27', 3466.44), 
(4, 4, '2020-02-15', 4325.54),
(5, 5, '2019-04-23', 2376.43),
(6, 6, '2021-04-25', 1344.34),
(7, 7, '2019-05-19', 1254.54),
(8, 8, '2018-03-15', 3425.43),
(9, 9, '2022-08-17',  2435.43),
(10, 10, '2021-03-21', 78.99);

INSERT INTO OrderDetails (Order_DetailsID, OrderID, ProductID, Quantity, Price_Per_Unit) VALUES
(1, 1, 1, 1, 1999.99),
(2, 2, 2, 1, 4999.99),
(3, 3, 3, 2, 3245.99),
(4, 4, 4, 1, 4359.99),
(5, 5, 5, 2, 4355.99),
(6, 6, 6, 5, 3500.00),
(7, 7, 7, 3, 3489.99),
(8, 8, 8, 4, 4587.99),
(9, 9, 9, 1, 2200.00),
(10, 10, 10, 2, 2329.99);


-- Question and Answer 

-- 1. Basic Queries:
-- 1.1. List all customers.
 Select * from Customers;

-- 1.2. Show all products in the 'Electronics' category.
 select * from products
 where Category = 'Electronics';

-- 1.3. Find the total number of orders placed.
 select count(*) from orders;

-- 1.4. Display the details of the most recent order. 

-- 2. Joins and Relationships:
-- 2.1. List all products along with the names of the customers who ordered them.

Select P.Name as Product_Name, C.Name as Customer_Name from products as P
join orderdetails as OD ON OD.ProductID = P.ProductID
join orders as O ON O.ordersID = OD.orderID
join customers as C ON C.customerID = O.customerID;

-- 2.2. Show orders that include more than one product.
select OrderID, Quantity from orderdetails
where Quantity >1;

-- 2.3. Find the total sales amount for each customer.

 Select C.Name, O.Total_Amount, OD.Quantity, O.Total_Amount * OD.Quantity as Total_Sales from customers as C
 join orders as O ON O.customerID = C.CustomerID
 join orderdetails as OD ON OD.OrderID = O.OrdersID;
 
-- 3. Aggregation and Grouping:
-- 3.1. Calculate the total revenue generated by each product category.

-- SELECT pc.Category, pc.Name, SUM(o.quantity * o.unit_price) AS total_revenue
-- FROM Products pc
-- JOIN orders p ON pc.category_id = p.category_id
-- JOIN Orderdetails o ON p.productID = o.productID
-- GROUP BY pc.categoryID, pc.name
-- ORDER BY total_revenue DESC;

-- 3.2. Determine the average order value.
select avg(Total_Amount) from orders;

-- 3.3. Find the month with the highest number of orders.
select distinct month (O.Order_Date) as Order_Month, OD.Quantity as Highest_number_of_Order from orders as O
join orderdetails as OD ON OD.OrderID = O.OrdersID
order by OD.Quantity desc
Limit 1;

-- 4. Subqueries and Nested Queries:
-- 4.1. Identify customers who have not placed any orders.
SELECT * FROM Customers
WHERE CustomerID NOT IN (SELECT CustomerID FROM orders);

-- 4.2. Find products that have never been ordered.

SELECT * FROM Products
WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM Orderdetails);

-- 4.3. Show the top 3 best-selling products.

SELECT P.ProductID, P.Name, OD.Sum(Quantity) AS total_sold FROM orderdetails as OD
JOIN products as P ON  P.ProductID = OD.ProductID 
GROUP BY P.ProductID, P.Name
ORDER BY total_sold DESC
LIMIT 3;

-- 5. Date and Time Functions:
-- 5.1. List orders placed in the last month.
SELECT * FROM orders
WHERE Order_Date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);

-- 5.2. Determine the oldest customer in terms of membership duration.

SELECT CustomerID, DATEDIFF(CURDATE(), Join_Date) AS Membership_Duration FROM Customers
ORDER BY membership_duration DESC
LIMIT 1;

-- 6. Advanced Queries:
-- 6.1. Rank customers based on their total spending.
-- 6.2. Identify the most popular product category.
-- 6.3. Calculate the month-over-month growth rate in sales.

-- 7. Data Manipulation and Updates:
-- 7.1. Add a new customer to the Customers table.

insert into Customers(CustomerID, Name, Email_ID, Join_Date) Values
(11,'Rohit Sharma', 'rohit23@gmail.com','2023-04-23'),
(12, 'Raman kumar', 'raman@example.com', '2020-01-10');

-- 7.2. Update the price of a specific product.

update products
set Price = 12000
where ProductID = 3;